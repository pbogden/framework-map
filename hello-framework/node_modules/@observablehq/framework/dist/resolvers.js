import { createHash } from "node:crypto";
import { extname, join } from "node:path/posix";
import { findAssets } from "./html.js";
import { defaultGlobals } from "./javascript/globals.js";
import { getFileHash, getModuleHash, getModuleInfo } from "./javascript/module.js";
import { getImplicitDependencies, getImplicitDownloads } from "./libraries.js";
import { getImplicitFileImports, getImplicitInputImports } from "./libraries.js";
import { getImplicitStylesheets } from "./libraries.js";
import { extractNodeSpecifier, resolveNodeImport, resolveNodeImports } from "./node.js";
import { extractNpmSpecifier, populateNpmCache, resolveNpmImport, resolveNpmImports } from "./npm.js";
import { isAssetPath, isPathImport, parseRelativeUrl, relativePath, resolveLocalPath, resolvePath } from "./path.js";
const defaultImports = [
  "observablehq:client",
  // Framework client
  "npm:@observablehq/runtime",
  // Runtime
  "npm:@observablehq/stdlib"
  // Standard library
];
const builtins = /* @__PURE__ */ new Map([
  ["npm:@observablehq/runtime", "/_observablehq/runtime.js"],
  ["npm:@observablehq/stdlib", "/_observablehq/stdlib.js"],
  ["npm:@observablehq/dot", "/_observablehq/stdlib/dot.js"],
  // TODO publish to npm
  ["npm:@observablehq/duckdb", "/_observablehq/stdlib/duckdb.js"],
  // TODO publish to npm
  ["npm:@observablehq/inputs", "/_observablehq/stdlib/inputs.js"],
  // TODO publish to npm
  ["npm:@observablehq/mermaid", "/_observablehq/stdlib/mermaid.js"],
  // TODO publish to npm
  ["npm:@observablehq/tex", "/_observablehq/stdlib/tex.js"],
  // TODO publish to npm
  ["npm:@observablehq/sqlite", "/_observablehq/stdlib/sqlite.js"],
  // TODO publish to npm
  ["npm:@observablehq/xlsx", "/_observablehq/stdlib/xlsx.js"],
  // TODO publish to npm
  ["npm:@observablehq/zip", "/_observablehq/stdlib/zip.js"]
  // TODO publish to npm
]);
async function getResolvers(page, { root, path, normalizePath, loaders }) {
  const hash = createHash("sha256").update(page.body).update(JSON.stringify(page.data));
  const assets = /* @__PURE__ */ new Set();
  const files = /* @__PURE__ */ new Set();
  const fileMethods = /* @__PURE__ */ new Set();
  const localImports = /* @__PURE__ */ new Set();
  const globalImports = new Set(defaultImports);
  const staticImports = new Set(defaultImports);
  const stylesheets = /* @__PURE__ */ new Set();
  const resolutions = /* @__PURE__ */ new Map();
  for (const html of [page.head, page.header, page.body, page.footer]) {
    if (!html)
      continue;
    const info = findAssets(html, path);
    for (const f of info.files)
      assets.add(f);
    for (const i of info.localImports)
      localImports.add(i);
    for (const i of info.globalImports)
      globalImports.add(i);
    for (const i of info.staticImports)
      staticImports.add(i);
  }
  stylesheets.add("https://fonts.googleapis.com/css2?family=Source+Serif+Pro:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&display=swap");
  if (page.style)
    stylesheets.add(page.style);
  for (const { node } of page.code) {
    for (const f of node.files) {
      files.add(f.name);
      if (f.method)
        fileMethods.add(f.method);
    }
    for (const i of node.imports) {
      (i.type === "local" ? localImports : globalImports).add(i.name);
      if (i.method === "static")
        staticImports.add(i.name);
    }
  }
  if (page.data.sql) {
    for (const source of Object.values(page.data.sql)) {
      files.add(String(source));
    }
  }
  for (const f of assets)
    hash.update(loaders.getSourceFileHash(resolvePath(path, f)));
  for (const f of files)
    hash.update(loaders.getSourceFileHash(resolvePath(path, f)));
  for (const i of localImports)
    hash.update(getModuleHash(root, resolvePath(path, i)));
  if (page.style && isPathImport(page.style))
    hash.update(loaders.getSourceFileHash(resolvePath(path, page.style)));
  for (const i of localImports) {
    const p = resolvePath(path, i);
    const info = getModuleInfo(root, p);
    if (!info)
      continue;
    for (const f of info.files)
      files.add(relativePath(path, resolvePath(p, f)));
    for (const m of info.fileMethods)
      fileMethods.add(m);
    for (const o of info.localStaticImports)
      localImports.add(relativePath(path, resolvePath(p, o)));
    for (const o of info.localDynamicImports)
      localImports.add(relativePath(path, resolvePath(p, o)));
    for (const o of info.globalStaticImports)
      globalImports.add(o);
    for (const o of info.globalDynamicImports)
      globalImports.add(o);
  }
  for (const i of staticImports) {
    if (!localImports.has(i))
      continue;
    const p = resolvePath(path, i);
    const info = getModuleInfo(root, p);
    if (!info)
      continue;
    for (const o of info.localStaticImports)
      staticImports.add(relativePath(path, resolvePath(p, o)));
    for (const o of info.globalStaticImports)
      staticImports.add(o);
  }
  for (const i of getImplicitFileImports(fileMethods)) {
    staticImports.add(i);
    globalImports.add(i);
  }
  for (const i of getImplicitInputImports(findFreeInputs(page))) {
    staticImports.add(i);
    globalImports.add(i);
  }
  if (page.code.some((c) => c.mode === "jsx")) {
    staticImports.add("npm:react-dom/client");
    globalImports.add("npm:react-dom/client");
  }
  for (const i of getImplicitDependencies(staticImports)) {
    staticImports.add(i);
  }
  for (const i of getImplicitDependencies(globalImports)) {
    globalImports.add(i);
  }
  for (const i of globalImports) {
    if (i.startsWith("npm:") && !builtins.has(i)) {
      resolutions.set(i, await resolveNpmImport(root, i.slice("npm:".length)));
    } else if (!/^\w+:/.test(i)) {
      try {
        resolutions.set(i, await resolveNodeImport(root, i));
      } catch {
      }
    }
  }
  for (const [key, value] of resolutions) {
    if (key.startsWith("npm:")) {
      for (const i of await resolveNpmImports(root, value)) {
        if (i.type === "local") {
          const path2 = resolvePath(value, i.name);
          const specifier = `npm:${extractNpmSpecifier(path2)}`;
          globalImports.add(specifier);
          resolutions.set(specifier, path2);
        }
      }
    } else if (!/^\w+:/.test(key)) {
      for (const i of await resolveNodeImports(root, value)) {
        if (i.type === "local") {
          const path2 = resolvePath(value, i.name);
          const specifier = extractNodeSpecifier(path2);
          globalImports.add(specifier);
          resolutions.set(specifier, path2);
        }
      }
    }
  }
  const staticResolutions = /* @__PURE__ */ new Map();
  for (const i of staticImports) {
    if (i.startsWith("npm:") || !/^\w+:/.test(i)) {
      const r = resolutions.get(i);
      if (r)
        staticResolutions.set(i, r);
    }
  }
  for (const [key, value] of staticResolutions) {
    if (key.startsWith("npm:")) {
      for (const i of await resolveNpmImports(root, value)) {
        if (i.type === "local" && i.method === "static") {
          const path2 = resolvePath(value, i.name);
          const specifier = `npm:${extractNpmSpecifier(path2)}`;
          staticImports.add(specifier);
          staticResolutions.set(specifier, path2);
        }
      }
    } else if (!/^\w+:/.test(key)) {
      for (const i of await resolveNodeImports(root, value)) {
        if (i.type === "local" && i.method === "static") {
          const path2 = resolvePath(value, i.name);
          const specifier = extractNodeSpecifier(path2);
          staticImports.add(specifier);
          staticResolutions.set(specifier, path2);
        }
      }
    }
  }
  for (const specifier of getImplicitStylesheets(staticImports)) {
    stylesheets.add(specifier);
    if (specifier.startsWith("npm:")) {
      const path2 = await resolveNpmImport(root, specifier.slice("npm:".length));
      resolutions.set(specifier, path2);
      await populateNpmCache(root, path2);
    }
  }
  for (const specifier of getImplicitDownloads(globalImports)) {
    globalImports.add(specifier);
    if (specifier.startsWith("npm:")) {
      const path2 = await resolveNpmImport(root, specifier.slice("npm:".length));
      resolutions.set(specifier, path2);
      await populateNpmCache(root, path2);
    }
  }
  function resolveImport(specifier) {
    return isPathImport(specifier) ? relativePath(path, resolveImportPath(root, resolvePath(path, specifier))) : builtins.has(specifier) ? relativePath(path, builtins.get(specifier)) : specifier.startsWith("observablehq:") ? relativePath(path, `/_observablehq/${specifier.slice("observablehq:".length)}${extname(specifier) ? "" : ".js"}`) : resolutions.has(specifier) ? relativePath(path, resolutions.get(specifier)) : specifier;
  }
  function resolveFile(specifier) {
    return relativePath(path, loaders.resolveFilePath(resolvePath(path, specifier)));
  }
  function resolveStylesheet(specifier) {
    return isPathImport(specifier) ? relativePath(path, resolveStylesheetPath(root, resolvePath(path, specifier))) : specifier.startsWith("observablehq:") ? relativePath(path, `/_observablehq/${specifier.slice("observablehq:".length)}`) : resolutions.has(specifier) ? relativePath(path, resolutions.get(specifier)) : specifier;
  }
  function resolveScript(src) {
    if (isAssetPath(src)) {
      const localPath = resolveLocalPath(path, src);
      return localPath ? resolveImport(relativePath(path, localPath)) : src;
    } else {
      return resolveImport(src);
    }
  }
  function resolveLink(href) {
    if (isAssetPath(href)) {
      const u = parseRelativeUrl(href);
      const localPath = resolveLocalPath(path, u.pathname);
      if (localPath)
        return relativePath(path, normalizePath(localPath)) + u.search + u.hash;
    }
    return href;
  }
  return {
    path,
    hash: hash.digest("hex"),
    assets,
    files,
    localImports,
    globalImports,
    staticImports,
    stylesheets,
    resolveFile,
    resolveImport,
    resolveScript,
    resolveStylesheet,
    resolveLink
  };
}
function getModuleResolver(root, path) {
  const servePath = `/${join("_import", path)}`;
  return async (specifier) => {
    return isPathImport(specifier) ? relativePath(servePath, resolveImportPath(root, resolvePath(path, specifier))) : builtins.has(specifier) ? relativePath(servePath, builtins.get(specifier)) : specifier.startsWith("observablehq:") ? relativePath(servePath, `/_observablehq/${specifier.slice("observablehq:".length)}${extname(specifier) ? "" : ".js"}`) : specifier.startsWith("npm:") ? relativePath(servePath, await resolveNpmImport(root, specifier.slice("npm:".length))) : !/^\w+:/.test(specifier) ? relativePath(servePath, await resolveNodeImport(root, specifier)) : specifier;
  };
}
function resolveStylesheetPath(root, path) {
  return `/${join("_import", path)}?sha=${getFileHash(root, path)}`;
}
function resolveImportPath(root, path) {
  return `/${join("_import", path)}?sha=${getModuleHash(root, path)}`;
}
function findFreeInputs(page) {
  const outputs = new Set(defaultGlobals).add("display").add("view").add("visibility").add("invalidation");
  const inputs = /* @__PURE__ */ new Set();
  for (const { node } of page.code) {
    if (node.declarations) {
      for (const { name } of node.declarations) {
        outputs.add(name);
      }
    }
  }
  for (const { node } of page.code) {
    for (const { name } of node.references) {
      if (!outputs.has(name)) {
        inputs.add(name);
      }
    }
  }
  return inputs;
}
export {
  builtins,
  getModuleResolver,
  getResolvers,
  resolveImportPath,
  resolveStylesheetPath
};
