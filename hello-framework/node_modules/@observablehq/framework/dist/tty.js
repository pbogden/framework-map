import { isatty } from "node:tty";
const reset = color(0, 0);
const bold = color(1, 22);
const faint = color(2, 22);
const italic = color(3, 23);
const underline = color(4, 24);
const inverse = color(7, 27);
const strikethrough = color(9, 29);
const red = color(31, 39);
const green = color(32, 39);
const yellow = color(33, 39);
const blue = color(34, 39);
const magenta = color(35, 39);
const cyan = color(36, 39);
function color(code, reset2) {
  return process.stdout.isTTY ? (text) => `\x1B[${code}m${text}\x1B[${reset2}m` : String;
}
const defaultEffects = {
  isTty: isatty(process.stdin.fd),
  logger: console,
  outputColumns: Math.min(80, process.stdout.columns ?? 80)
};
function stripColor(s) {
  return s.replace(/\x1b\[[0-9;]*m/g, "");
}
function hangingIndentLog(effects, prefix, message) {
  let output;
  let indent;
  if (effects.isTty) {
    const prefixLength = stripColor(prefix).length + 1;
    const lineBudget = effects.outputColumns - prefixLength;
    const tokens = message.split(" ");
    const lines = [[]];
    indent = " ".repeat(prefixLength);
    let lastLineLength = 0;
    while (tokens.length) {
      let token = tokens.shift();
      let newline = false;
      if (token.includes("\n")) {
        let rest;
        [token, rest] = token.split("\n", 2);
        tokens.unshift(rest);
        newline = true;
      }
      const tokenLength = stripColor(token).length;
      lastLineLength += tokenLength + 1;
      if (lastLineLength > lineBudget) {
        lines.push([]);
        lastLineLength = tokenLength;
      }
      lines.at(-1)?.push(token);
      if (newline) {
        lines.push([]);
        lastLineLength = tokenLength;
      }
    }
    output = prefix + " ";
    output += lines.map((line) => line.join(" ")).join("\n" + indent);
  } else {
    output = `${prefix} ${message}`;
    indent = "";
  }
  effects.logger.log(output);
  return { output, indent };
}
function link(url) {
  if (url instanceof URL)
    url = url.href;
  return underline(url);
}
export {
  blue,
  bold,
  cyan,
  defaultEffects,
  faint,
  green,
  hangingIndentLog,
  inverse,
  italic,
  link,
  magenta,
  red,
  reset,
  strikethrough,
  stripColor,
  underline,
  yellow
};
