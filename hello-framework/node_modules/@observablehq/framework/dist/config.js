import { createHash } from "node:crypto";
import { existsSync, readFileSync } from "node:fs";
import { stat } from "node:fs/promises";
import op from "node:path";
import { basename, dirname, extname, join } from "node:path/posix";
import { cwd } from "node:process";
import { pathToFileURL } from "node:url";
import wrapAnsi from "wrap-ansi";
import { LoaderResolver } from "./dataloader.js";
import { visitMarkdownFiles } from "./files.js";
import { formatIsoDate, formatLocaleDate } from "./format.js";
import { createMarkdownIt, parseMarkdownMetadata } from "./markdown.js";
import { isAssetPath, parseRelativeUrl, resolvePath } from "./path.js";
import { resolveTheme } from "./theme.js";
import { bold, yellow } from "./tty.js";
function resolveConfig(configPath, root = ".") {
  return op.join(cwd(), root, configPath);
}
async function importConfig(path) {
  const { mtimeMs } = await stat(path);
  return (await import(`${pathToFileURL(path).href}?${mtimeMs}`)).default;
}
async function readConfig(configPath, root) {
  if (configPath === void 0)
    configPath = await resolveDefaultConfig(root);
  if (configPath === void 0)
    return normalizeConfig(void 0, root);
  return normalizeConfig(await importConfig(configPath), root, configPath);
}
async function resolveDefaultConfig(root) {
  const jsPath = resolveConfig("observablehq.config.js", root);
  if (existsSync(jsPath))
    return jsPath;
  const tsPath = resolveConfig("observablehq.config.ts", root);
  if (existsSync(tsPath))
    return await import("tsx/esm"), tsPath;
}
let cachedPages = null;
function readPages(root, md) {
  const files = [];
  const hash = createHash("sha256");
  for (const file of visitMarkdownFiles(root)) {
    if (file === "index.md" || file === "404.md")
      continue;
    const source = readFileSync(join(root, file), "utf8");
    files.push({ file, source });
    hash.update(file).update(source);
  }
  const key = hash.digest("hex");
  if (cachedPages?.key === key)
    return cachedPages.pages;
  const pages = [];
  for (const { file, source } of files) {
    const { data, title } = parseMarkdownMetadata(source, { path: file, md });
    if (data.draft)
      continue;
    const name = basename(file, ".md");
    const { pager = "main" } = data;
    const page = { path: join("/", dirname(file), name), name: title ?? "Untitled", pager };
    if (name === "index")
      pages.unshift(page);
    else
      pages.push(page);
  }
  cachedPages = { key, pages };
  return pages;
}
let currentDate = null;
function setCurrentDate(date) {
  currentDate = date;
}
const configCache = /* @__PURE__ */ new WeakMap();
function normalizeConfig(spec = {}, defaultRoot, watchPath) {
  const cachedConfig = configCache.get(spec);
  if (cachedConfig)
    return cachedConfig;
  const root = spec.root === void 0 ? findDefaultRoot(defaultRoot) : String(spec.root);
  const output = spec.output === void 0 ? "dist" : String(spec.output);
  const base = spec.base === void 0 ? "/" : normalizeBase(spec.base);
  const style = spec.style === null ? null : spec.style !== void 0 ? { path: String(spec.style) } : { theme: normalizeTheme(spec.theme === void 0 ? "default" : spec.theme) };
  const md = createMarkdownIt({
    linkify: spec.linkify === void 0 ? void 0 : Boolean(spec.linkify),
    typographer: spec.typographer === void 0 ? void 0 : Boolean(spec.typographer),
    quotes: spec.quotes === void 0 ? void 0 : spec.quotes,
    markdownIt: spec.markdownIt
  });
  const title = spec.title === void 0 ? void 0 : String(spec.title);
  const pages = spec.pages === void 0 ? void 0 : normalizePages(spec.pages);
  const pager = spec.pager === void 0 ? true : Boolean(spec.pager);
  const toc = normalizeToc(spec.toc);
  const sidebar = spec.sidebar === void 0 ? void 0 : Boolean(spec.sidebar);
  const scripts = spec.scripts === void 0 ? [] : normalizeScripts(spec.scripts);
  const head = pageFragment(spec.head === void 0 ? "" : spec.head);
  const header = pageFragment(spec.header === void 0 ? "" : spec.header);
  const footer = pageFragment(spec.footer === void 0 ? defaultFooter() : spec.footer);
  const search = spec.search == null || spec.search === false ? null : normalizeSearch(spec.search);
  const interpreters = normalizeInterpreters(spec.interpreters);
  const config = {
    root,
    output,
    base,
    title,
    sidebar,
    // see below
    pages,
    // see below
    pager,
    scripts,
    head,
    header,
    footer,
    toc,
    style,
    search,
    md,
    normalizePath: getPathNormalizer(spec.cleanUrls),
    loaders: new LoaderResolver({ root, interpreters }),
    watchPath
  };
  if (pages === void 0)
    Object.defineProperty(config, "pages", { get: () => readPages(root, md) });
  if (sidebar === void 0)
    Object.defineProperty(config, "sidebar", { get: () => config.pages.length > 0 });
  configCache.set(spec, config);
  return config;
}
function getPathNormalizer(spec = true) {
  const cleanUrls = Boolean(spec);
  return (path) => {
    if (path && !path.endsWith("/") && !extname(path))
      path += ".html";
    if (path === "index.html")
      path = ".";
    else if (path.endsWith("/index.html"))
      path = path.slice(0, -"index.html".length);
    else if (cleanUrls)
      path = path.replace(/\.html$/, "");
    return path;
  };
}
function pageFragment(spec) {
  return typeof spec === "function" ? spec : stringOrNull(spec);
}
function defaultFooter() {
  const date = currentDate ?? /* @__PURE__ */ new Date();
  return `Built with <a href="https://observablehq.com/" target="_blank">Observable</a> on <a title="${formatIsoDate(
    date
  )}">${formatLocaleDate(date)}</a>.`;
}
function findDefaultRoot(defaultRoot) {
  if (defaultRoot !== void 0)
    return defaultRoot;
  const root = existsSync("docs") ? "docs" : "src";
  console.warn(
    wrapAnsi(
      `${yellow("Warning:")} the config file is missing the ${bold(
        "root"
      )} option, which specifies the path to the source root.${root === "docs" ? ` The recommended source root is ${bold('"src"')}; however, since ${bold(
        "docs"
      )} exists and was previously the default for this option, we will use ${bold('"docs"')}.` : ""} You can suppress this warning by specifying ${bold(`root: ${JSON.stringify(root)}`)} in the config file.
`,
      Math.min(80, process.stdout.columns ?? 80)
    )
  );
  return root;
}
function normalizeBase(spec) {
  let base = String(spec);
  if (!base.startsWith("/"))
    throw new Error(`base must start with slash: ${base}`);
  if (!base.endsWith("/"))
    base += "/";
  return base;
}
function normalizeTheme(spec) {
  return resolveTheme(typeof spec === "string" ? [spec] : spec === null ? [] : Array.from(spec, String));
}
function normalizeScripts(spec) {
  console.warn(`${yellow("Warning:")} the ${bold("scripts")} option is deprecated; use ${bold("head")} instead.`);
  return Array.from(spec, normalizeScript);
}
function normalizeScript(spec) {
  const script = typeof spec === "string" ? { src: spec } : spec;
  const src = String(script.src);
  const async = script.async === void 0 ? false : Boolean(script.async);
  const type = script.type == null ? null : String(script.type);
  return { src, async, type };
}
function normalizePages(spec) {
  return Array.from(
    spec,
    (spec2) => "pages" in spec2 ? normalizeSection(spec2, normalizePage) : normalizePage(spec2)
  );
}
function normalizeSection(spec, normalizePage2) {
  const name = String(spec.name);
  const collapsible = spec.collapsible === void 0 ? spec.open !== void 0 : Boolean(spec.collapsible);
  const open = collapsible ? Boolean(spec.open) : true;
  const pager = spec.pager === void 0 ? "main" : stringOrNull(spec.pager);
  const path = spec.path == null ? null : normalizePath(spec.path);
  const pages = Array.from(spec.pages, (spec2) => normalizePage2(spec2, pager));
  return { name, collapsible, open, path, pager, pages };
}
function normalizePage(spec, defaultPager = "main") {
  const name = String(spec.name);
  const path = normalizePath(spec.path);
  const pager = spec.pager === void 0 && isAssetPath(path) ? defaultPager : stringOrNull(spec.pager);
  return { name, path, pager };
}
function normalizeSearch(spec) {
  const index = spec.index == null ? null : spec.index;
  if (index !== null && typeof index !== "function")
    throw new Error("search.index is not a function");
  return { index };
}
function normalizePath(spec) {
  let path = String(spec);
  if (isAssetPath(path)) {
    const u = parseRelativeUrl(join("/", path));
    let { pathname } = u;
    pathname = pathname.replace(/\.html$/i, "");
    pathname = pathname.replace(/\/$/, "/index");
    path = pathname + u.search + u.hash;
  }
  return path;
}
function normalizeInterpreters(spec = {}) {
  return Object.fromEntries(
    Object.entries(spec).map(([key, value]) => {
      return [String(key), value == null ? null : Array.from(value, String)];
    })
  );
}
function normalizeToc(spec = true) {
  const toc = typeof spec === "boolean" ? { show: spec } : spec;
  const label = toc.label === void 0 ? "Contents" : String(toc.label);
  const show = toc.show === void 0 ? true : Boolean(toc.show);
  return { label, show };
}
function mergeToc(spec = {}, toc) {
  const { label = toc.label, show = toc.show } = spec;
  return { label, show };
}
function mergeStyle(path, style, theme, defaultStyle) {
  return style === void 0 && theme === void 0 ? defaultStyle : style === null ? null : style !== void 0 ? { path: resolvePath(path, style) } : theme === void 0 ? defaultStyle : { theme };
}
function stringOrNull(spec) {
  return spec == null || spec === false ? null : String(spec);
}
export {
  mergeStyle,
  mergeToc,
  normalizeConfig,
  normalizeTheme,
  readConfig,
  setCurrentDate,
  stringOrNull
};
